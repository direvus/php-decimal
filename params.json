{"name":"php-decimal","tagline":"An arbitrary-precision decimal library for PHP","body":"php-decimal\r\n===========\r\n\r\nAn arbitrary-precision decimal library for PHP.\r\n\r\nhttps://github.com/direvus/php-decimal\r\n\r\nBackground\r\n----------\r\n\r\nThe PHP language only offers two numeric data types: *int* and *float*.\r\nNeither of these types are suitable for a substantial set of real-world\r\nproblems, where exact arithmetic with values of arbitrary precision are\r\nrequired -- notably, when working with monetary values.\r\n\r\nPHP's optional extension [BCMath][1] provides some limited features in this\r\narea, but it is awkward to use when precision is variable, and it does not\r\nsupport rounding.\r\n\r\nThis library uses the BCMath functions internally, but hides them behind a more\r\nconvenient, object-oriented, and intuitive API.\r\n\r\nInstallation\r\n------------\r\n\r\nCopy the library file 'decimal.php' to anywhere on your system you like.\r\nPersonally I recommend something like `/usr/local/lib/php-decimal`, but it's\r\ntotally up to you.\r\n\r\nIn your PHP code, execute `include '/path/to/lib/decimal.php';` and you're\r\nready to use the library.\r\n\r\nUsage\r\n-----\r\n\r\nOne classic example of how binary floating-point values can ruin your day is\r\nthe expression (0.1 + 0.1 + 0.1 - 0.3), which is of course equal to zero.\r\nLet's use this as a worked example.  First, using PHP's built-in float data\r\ntype:\r\n\r\n    php > $n = 0.1 + 0.1 + 0.1 - 0.3;\r\n    php > var_dump($n);\r\n    float(5.5511151231258E-17)\r\n    \r\n    php > var_dump($n == 0);\r\n    bool(false)\r\n\r\nUnless you want to do all your comparisons using an epsilon value, binary\r\nfloating-point is exactly this kind of trouble waiting to happen.  The next\r\nmost obvious place to turn is the BCMath extension, which would look like:\r\n\r\n    php > bcscale(1);\r\n    php > $n = bcsub(bcadd(bcadd('0.1', '0.1'), '0.1'), '0.3');\r\n    php > var_dump($n);\r\n    string(3) \"0.0\"\r\n    \r\n    php > var_dump(bccomp($n, 0) == 0);\r\n    bool(true)\r\n\r\nNow we're at least getting the right answer, but the code is an unreadable\r\nmess, and it gets worse if you don't know ahead of time what the precision of\r\nyour inputs is going to be, and therefore can't choose a global value for\r\nbcscale that will be appropriate for all circumstances.\r\n\r\nEnter php-decimal:\r\n\r\n    php > include '/path/to/lib/decimal.php';\r\n    \r\n    php > $n = new Decimal\\Decimal;\r\n    php > $n->increase('0.1', '0.1', '0.1', '-0.3');\r\n    php > var_dump((string) $n);\r\n    string(1) \"0\"\r\n    \r\n    php > var_dump($n->zero());\r\n    bool(true)\r\n\r\nWe didn't have to lock php-decimal into any particular precision for its\r\ncomputations; it noticed that all its operands had a scale of 1, so it told\r\nBCMath to performs its operations at scale 1.  If any of the operands had had a\r\ngreater scale, then we would have used that scale instead.\r\n\r\nUnfortunately, as PHP does not offer any way to hook into its built-in\r\ncomparison and arithmetic operators, it isn't possible to use natural syntax\r\nlike `$c = $a + $b`, where `$a` and `$b` are Decimal objects.  We have to make\r\ndo with relatively ugly method calls.\r\n\r\nInternals\r\n---------\r\n\r\nEach instance of the Decimal class consists of:\r\n\r\n  * a sequence of decimal digits stored as a PHP string,\r\n  * an integer exponent, and\r\n  * a boolean indicating whether the number is negative.\r\n\r\nEach Decimal value represents the real number *n* such that:\r\n\r\n    n = [-]digits × (10 ^ exponent)\r\n\r\nThe number 7500 would be therefore represented internally by the values\r\n`('75', 2, false)`, respectively, as 7500 = 75 × 10^2.\r\n\r\nIt can be seen that, for every real number which has a finite representation in\r\ndecimal form, there are infinitely many possible Decimal representations, but\r\nonly one representation which uses the minimal number of decimal digits, which\r\nis called the 'normal' or 'canonical' representation.\r\n\r\nDecimals can be initialised from other Decimal instances, strings describing\r\nnumbers, integers and floats (with the caveat that if you initialise from a\r\nfloat you might end up exposing yourself to precisely the kind of mischief this\r\nlibrary was created to avoid).\r\n\r\nIn terms of performance, this library is probably pretty awful and should\r\nreally only be used as a last resort.  If at all possible, perform all\r\ncomputations in your database or in some other programming environment, and\r\nleave PHP blissfully agnostic of difficult problems like basic arithmetic.\r\n\r\nStandards\r\n---------\r\n\r\nThis library has some superficial resemblances to the IEEE 854 and 754\r\nstandards, but does not comply, nor does it attempt to comply, with these\r\nstandards.  It would be possible to extend the library into compliance, but at\r\nthis time the author has no intention of doing so.\r\n\r\nIn particular, php-decimal does not attempt to represent abstract numeric\r\nconcepts like NaN (\"Not a Number\"), infinity or negative infinity.\r\n\r\nLicense\r\n-------\r\n\r\nphp-decimal is released under the \"BSD 2-clause license\", the full text of\r\nwhich can be found in the LICENSE file at the top level of the repository.\r\n\r\nAuthor\r\n------\r\n\r\nphp-decimal was written by Brendan Jurd, in a fit of pique after PHP munged his\r\nnumbers in early 2014.\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nThis library was heavily inspired by the [decimal][2] module of Python's\r\nstandard library, and the [numeric data type][3] of PostgreSQL.  If any credit\r\nis due, most of it belongs to the authors of these projects.\r\n\r\n  [1]: http://au2.php.net/manual/en/book.bc.php\r\n  [2]: http://docs.python.org/2/library/decimal.html\r\n  [3]: http://www.postgresql.org/docs/current/static/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}